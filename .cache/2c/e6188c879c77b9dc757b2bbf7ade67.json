{"id":"node_modules/apache-arrow/builder/int.js","dependencies":[{"name":"/Users/yangjunran/Desktop/github/sv-demo/node_modules/apache-arrow/builder/int.js.map","includedInParent":true,"mtime":1620712940685},{"name":"/Users/yangjunran/Desktop/github/sv-demo/package.json","includedInParent":true,"mtime":1620836303330},{"name":"/Users/yangjunran/Desktop/github/sv-demo/node_modules/apache-arrow/package.json","includedInParent":true,"mtime":1620712940685},{"name":"../util/bn","loc":{"line":20,"column":21},"parent":"/Users/yangjunran/Desktop/github/sv-demo/node_modules/apache-arrow/builder/int.js","resolved":"/Users/yangjunran/Desktop/github/sv-demo/node_modules/apache-arrow/util/bn.js"},{"name":"./buffer","loc":{"line":21,"column":25},"parent":"/Users/yangjunran/Desktop/github/sv-demo/node_modules/apache-arrow/builder/int.js","resolved":"/Users/yangjunran/Desktop/github/sv-demo/node_modules/apache-arrow/builder/buffer.js"},{"name":"../util/compat","loc":{"line":22,"column":25},"parent":"/Users/yangjunran/Desktop/github/sv-demo/node_modules/apache-arrow/builder/int.js","resolved":"/Users/yangjunran/Desktop/github/sv-demo/node_modules/apache-arrow/util/compat.js"},{"name":"../builder","loc":{"line":23,"column":26},"parent":"/Users/yangjunran/Desktop/github/sv-demo/node_modules/apache-arrow/builder/int.js","resolved":"/Users/yangjunran/Desktop/github/sv-demo/node_modules/apache-arrow/builder.js"}],"generated":{"js":"\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Uint64Builder = exports.Uint32Builder = exports.Uint16Builder = exports.Uint8Builder = exports.Int64Builder = exports.Int32Builder = exports.Int16Builder = exports.Int8Builder = exports.IntBuilder = void 0;\nconst bn_1 = require(\"../util/bn\");\nconst buffer_1 = require(\"./buffer\");\nconst compat_1 = require(\"../util/compat\");\nconst builder_1 = require(\"../builder\");\n/** @ignore */\nclass IntBuilder extends builder_1.FixedWidthBuilder {\n    setValue(index, value) {\n        this._values.set(index, value);\n    }\n}\nexports.IntBuilder = IntBuilder;\n/** @ignore */\nclass Int8Builder extends IntBuilder {\n}\nexports.Int8Builder = Int8Builder;\n/** @ignore */\nclass Int16Builder extends IntBuilder {\n}\nexports.Int16Builder = Int16Builder;\n/** @ignore */\nclass Int32Builder extends IntBuilder {\n}\nexports.Int32Builder = Int32Builder;\n/** @ignore */\nclass Int64Builder extends IntBuilder {\n    constructor(options) {\n        if (options['nullValues']) {\n            options['nullValues'] = options['nullValues'].map(toBigInt);\n        }\n        super(options);\n        this._values = new buffer_1.WideBufferBuilder(new Int32Array(0), 2);\n    }\n    get values64() { return this._values.buffer64; }\n    isValid(value) { return super.isValid(toBigInt(value)); }\n}\nexports.Int64Builder = Int64Builder;\n/** @ignore */\nclass Uint8Builder extends IntBuilder {\n}\nexports.Uint8Builder = Uint8Builder;\n/** @ignore */\nclass Uint16Builder extends IntBuilder {\n}\nexports.Uint16Builder = Uint16Builder;\n/** @ignore */\nclass Uint32Builder extends IntBuilder {\n}\nexports.Uint32Builder = Uint32Builder;\n/** @ignore */\nclass Uint64Builder extends IntBuilder {\n    constructor(options) {\n        if (options['nullValues']) {\n            options['nullValues'] = options['nullValues'].map(toBigInt);\n        }\n        super(options);\n        this._values = new buffer_1.WideBufferBuilder(new Uint32Array(0), 2);\n    }\n    get values64() { return this._values.buffer64; }\n    isValid(value) { return super.isValid(toBigInt(value)); }\n}\nexports.Uint64Builder = Uint64Builder;\nconst toBigInt = ((memo) => (value) => {\n    if (ArrayBuffer.isView(value)) {\n        memo.buffer = value.buffer;\n        memo.byteOffset = value.byteOffset;\n        memo.byteLength = value.byteLength;\n        value = bn_1.bignumToBigInt(memo);\n        memo.buffer = null;\n    }\n    return value;\n})({ 'BigIntArray': compat_1.BigInt64Array });\n\n\n"},"sourceMaps":{"js":{"version":3,"sources":["builder/int.ts"],"names":[],"mappings":"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","file":"int.js","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { bignumToBigInt } from '../util/bn';\nimport { WideBufferBuilder } from './buffer';\nimport { BigInt64Array } from '../util/compat';\nimport { FixedWidthBuilder, BuilderOptions } from '../builder';\nimport { Int, Int8, Int16, Int32, Int64, Uint8, Uint16, Uint32, Uint64 } from '../type';\n\n/** @ignore */\nexport class IntBuilder<T extends Int = Int, TNull = any> extends FixedWidthBuilder<T, TNull> {\n    public setValue(index: number, value: T['TValue']) {\n        this._values.set(index, value);\n    }\n}\n\n/** @ignore */\nexport class Int8Builder<TNull = any> extends IntBuilder<Int8, TNull> {}\n/** @ignore */\nexport class Int16Builder<TNull = any> extends IntBuilder<Int16, TNull> {}\n/** @ignore */\nexport class Int32Builder<TNull = any> extends IntBuilder<Int32, TNull> {}\n/** @ignore */\nexport class Int64Builder<TNull = any> extends IntBuilder<Int64, TNull> {\n    protected _values: WideBufferBuilder<Int32Array, BigInt64Array>;\n    constructor(options: BuilderOptions<Int64, TNull>) {\n        if (options['nullValues']) {\n            options['nullValues'] = (options['nullValues'] as TNull[]).map(toBigInt);\n        }\n        super(options);\n        this._values = new WideBufferBuilder(new Int32Array(0), 2);\n    }\n    public get values64() { return this._values.buffer64; }\n    public isValid(value: Int32Array | bigint | TNull) { return super.isValid(toBigInt(value)); }\n}\n\n/** @ignore */\nexport class Uint8Builder<TNull = any> extends IntBuilder<Uint8, TNull> {}\n/** @ignore */\nexport class Uint16Builder<TNull = any> extends IntBuilder<Uint16, TNull> {}\n/** @ignore */\nexport class Uint32Builder<TNull = any> extends IntBuilder<Uint32, TNull> {}\n/** @ignore */\nexport class Uint64Builder<TNull = any> extends IntBuilder<Uint64, TNull> {\n    protected _values: WideBufferBuilder<Uint32Array, BigUint64Array>;\n    constructor(options: BuilderOptions<Uint64, TNull>) {\n        if (options['nullValues']) {\n            options['nullValues'] = (options['nullValues'] as TNull[]).map(toBigInt);\n        }\n        super(options);\n        this._values = new WideBufferBuilder(new Uint32Array(0), 2);\n    }\n    public get values64() { return this._values.buffer64; }\n    public isValid(value: Uint32Array | bigint | TNull) { return super.isValid(toBigInt(value)); }\n}\n\nconst toBigInt = ((memo: any) => (value: any) => {\n    if (ArrayBuffer.isView(value)) {\n        memo.buffer = value.buffer;\n        memo.byteOffset = value.byteOffset;\n        memo.byteLength = value.byteLength;\n        value = bignumToBigInt(memo);\n        memo.buffer = null;\n    }\n    return value;\n})({ 'BigIntArray': BigInt64Array });\n"]}},"error":null,"hash":"39822ab1616f24455c0f4ea4d6b93805","cacheData":{"env":{}}}