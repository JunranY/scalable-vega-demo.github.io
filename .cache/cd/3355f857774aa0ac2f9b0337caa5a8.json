{"id":"Qx6r","dependencies":[{"name":"/Users/yangjunran/Desktop/github/sv-demo/node_modules/apache-arrow/vector/utf8.js.map","includedInParent":true,"mtime":1620712940685},{"name":"/Users/yangjunran/Desktop/github/sv-demo/package.json","includedInParent":true,"mtime":1620836303330},{"name":"/Users/yangjunran/Desktop/github/sv-demo/node_modules/apache-arrow/package.json","includedInParent":true,"mtime":1620712940685},{"name":"../vector","loc":{"line":20,"column":25},"parent":"/Users/yangjunran/Desktop/github/sv-demo/node_modules/apache-arrow/vector/utf8.js","resolved":"/Users/yangjunran/Desktop/github/sv-demo/node_modules/apache-arrow/vector.js"},{"name":"./base","loc":{"line":21,"column":23},"parent":"/Users/yangjunran/Desktop/github/sv-demo/node_modules/apache-arrow/vector/utf8.js","resolved":"/Users/yangjunran/Desktop/github/sv-demo/node_modules/apache-arrow/vector/base.js"},{"name":"../type","loc":{"line":22,"column":23},"parent":"/Users/yangjunran/Desktop/github/sv-demo/node_modules/apache-arrow/vector/utf8.js","resolved":"/Users/yangjunran/Desktop/github/sv-demo/node_modules/apache-arrow/type.js"},{"name":"./index","loc":{"line":23,"column":24},"parent":"/Users/yangjunran/Desktop/github/sv-demo/node_modules/apache-arrow/vector/utf8.js","resolved":"/Users/yangjunran/Desktop/github/sv-demo/node_modules/apache-arrow/vector/index.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.Utf8Vector=void 0;const e=require(\"../vector\"),r=require(\"./base\"),t=require(\"../type\"),o=require(\"./index\");class s extends r.BaseVector{static from(e){return o.vectorFromValuesWithType(()=>new t.Utf8,e)}asBinary(){return e.Vector.new(this.data.clone(new t.Binary))}}exports.Utf8Vector=s;"},"sourceMaps":{"js":{"mappings":[{"source":"vector/utf8.ts","name":null,"original":{"line":18,"column":0},"generated":{"line":1,"column":94}},{"source":"vector/utf8.ts","name":null,"original":{"line":18,"column":0},"generated":{"line":1,"column":100}},{"source":"vector/utf8.ts","name":null,"original":{"line":18,"column":0},"generated":{"line":1,"column":102}},{"source":"vector/utf8.ts","name":null,"original":{"line":18,"column":0},"generated":{"line":1,"column":110}},{"source":"vector/utf8.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":1,"column":123}},{"source":"vector/utf8.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":1,"column":125}},{"source":"vector/utf8.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":1,"column":133}},{"source":"vector/utf8.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":1,"column":143}},{"source":"vector/utf8.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":1,"column":145}},{"source":"vector/utf8.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":1,"column":153}},{"source":"vector/utf8.ts","name":null,"original":{"line":23,"column":0},"generated":{"line":1,"column":164}},{"source":"vector/utf8.ts","name":null,"original":{"line":23,"column":0},"generated":{"line":1,"column":166}},{"source":"vector/utf8.ts","name":null,"original":{"line":23,"column":0},"generated":{"line":1,"column":174}},{"source":"vector/utf8.ts","name":null,"original":{"line":27,"column":0},"generated":{"line":1,"column":185}},{"source":"vector/utf8.ts","name":null,"original":{"line":27,"column":13},"generated":{"line":1,"column":191}},{"source":"vector/utf8.ts","name":null,"original":{"line":27,"column":32},"generated":{"line":1,"column":201}},{"source":"vector/utf8.ts","name":null,"original":{"line":27,"column":32},"generated":{"line":1,"column":203}},{"source":"vector/utf8.ts","name":null,"original":{"line":33,"column":11},"generated":{"line":1,"column":214}},{"source":"vector/utf8.ts","name":null,"original":{"line":33,"column":36},"generated":{"line":1,"column":226}},{"source":"vector/utf8.ts","name":null,"original":{"line":34,"column":8},"generated":{"line":1,"column":229}},{"source":"vector/utf8.ts","name":null,"original":{"line":34,"column":15},"generated":{"line":1,"column":236}},{"source":"vector/utf8.ts","name":null,"original":{"line":34,"column":15},"generated":{"line":1,"column":238}},{"source":"vector/utf8.ts","name":null,"original":{"line":34,"column":40},"generated":{"line":1,"column":263}},{"source":"vector/utf8.ts","name":null,"original":{"line":34,"column":46},"generated":{"line":1,"column":267}},{"source":"vector/utf8.ts","name":null,"original":{"line":34,"column":50},"generated":{"line":1,"column":271}},{"source":"vector/utf8.ts","name":null,"original":{"line":34,"column":50},"generated":{"line":1,"column":273}},{"source":"vector/utf8.ts","name":null,"original":{"line":34,"column":58},"generated":{"line":1,"column":278}},{"source":"vector/utf8.ts","name":null,"original":{"line":36,"column":11},"generated":{"line":1,"column":281}},{"source":"vector/utf8.ts","name":null,"original":{"line":37,"column":8},"generated":{"line":1,"column":292}},{"source":"vector/utf8.ts","name":null,"original":{"line":37,"column":15},"generated":{"line":1,"column":299}},{"source":"vector/utf8.ts","name":null,"original":{"line":37,"column":15},"generated":{"line":1,"column":301}},{"source":"vector/utf8.ts","name":null,"original":{"line":37,"column":22},"generated":{"line":1,"column":308}},{"source":"vector/utf8.ts","name":null,"original":{"line":37,"column":26},"generated":{"line":1,"column":312}},{"source":"vector/utf8.ts","name":null,"original":{"line":37,"column":31},"generated":{"line":1,"column":317}},{"source":"vector/utf8.ts","name":null,"original":{"line":37,"column":36},"generated":{"line":1,"column":322}},{"source":"vector/utf8.ts","name":null,"original":{"line":37,"column":42},"generated":{"line":1,"column":328}},{"source":"vector/utf8.ts","name":null,"original":{"line":37,"column":46},"generated":{"line":1,"column":332}},{"source":"vector/utf8.ts","name":null,"original":{"line":37,"column":46},"generated":{"line":1,"column":334}},{"source":"vector/utf8.ts","name":null,"original":{"line":27,"column":0},"generated":{"line":1,"column":344}},{"source":"vector/utf8.ts","name":null,"original":{"line":27,"column":0},"generated":{"line":1,"column":352}},{"source":"vector/utf8.ts","name":null,"original":{"line":27,"column":0},"generated":{"line":1,"column":363}}],"sources":{"vector/utf8.ts":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { Binary, Utf8 } from '../type';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\n\n/** @ignore */\nexport class Utf8Vector extends BaseVector<Utf8> {\n    public static from<TNull = any>(input: Iterable<string | TNull>): Utf8Vector;\n    public static from<TNull = any>(input: AsyncIterable<string | TNull>): Promise<Utf8Vector>;\n    public static from<TNull = any>(input: VectorBuilderOptions<Utf8, string | TNull>): Chunked<Utf8>;\n    public static from<TNull = any>(input: VectorBuilderOptionsAsync<Utf8, string | TNull>): Promise<Chunked<Utf8>>;\n    /** @nocollapse */\n    public static from<TNull = any>(input: Iterable<string | TNull> | AsyncIterable<string | TNull> | VectorBuilderOptions<Utf8, string | TNull> | VectorBuilderOptionsAsync<Utf8, string | TNull>) {\n        return vectorFromValuesWithType(() => new Utf8(), input);\n    }\n    public asBinary() {\n        return Vector.new(this.data.clone(new Binary()));\n    }\n}\n"},"lineCount":null}},"error":null,"hash":"387597318cdc8c95b56201c3faf06c76","cacheData":{"env":{}}}