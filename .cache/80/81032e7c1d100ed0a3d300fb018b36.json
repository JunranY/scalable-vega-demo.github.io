{"id":"TLXT","dependencies":[{"name":"/Users/yangjunran/Desktop/github/sv-demo/node_modules/apache-arrow/vector/bool.js.map","includedInParent":true,"mtime":1620712940685},{"name":"/Users/yangjunran/Desktop/github/sv-demo/package.json","includedInParent":true,"mtime":1620836303330},{"name":"/Users/yangjunran/Desktop/github/sv-demo/node_modules/apache-arrow/package.json","includedInParent":true,"mtime":1620712940685},{"name":"../type","loc":{"line":20,"column":23},"parent":"/Users/yangjunran/Desktop/github/sv-demo/node_modules/apache-arrow/vector/bool.js","resolved":"/Users/yangjunran/Desktop/github/sv-demo/node_modules/apache-arrow/type.js"},{"name":"./base","loc":{"line":21,"column":23},"parent":"/Users/yangjunran/Desktop/github/sv-demo/node_modules/apache-arrow/vector/bool.js","resolved":"/Users/yangjunran/Desktop/github/sv-demo/node_modules/apache-arrow/vector/base.js"},{"name":"./index","loc":{"line":22,"column":24},"parent":"/Users/yangjunran/Desktop/github/sv-demo/node_modules/apache-arrow/vector/bool.js","resolved":"/Users/yangjunran/Desktop/github/sv-demo/node_modules/apache-arrow/vector/index.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.BoolVector=void 0;const e=require(\"../type\"),r=require(\"./base\"),o=require(\"./index\");class t extends r.BaseVector{static from(r){return o.vectorFromValuesWithType(()=>new e.Bool,r)}}exports.BoolVector=t;"},"sourceMaps":{"js":{"mappings":[{"source":"vector/bool.ts","name":null,"original":{"line":18,"column":0},"generated":{"line":1,"column":94}},{"source":"vector/bool.ts","name":null,"original":{"line":18,"column":0},"generated":{"line":1,"column":100}},{"source":"vector/bool.ts","name":null,"original":{"line":18,"column":0},"generated":{"line":1,"column":102}},{"source":"vector/bool.ts","name":null,"original":{"line":18,"column":0},"generated":{"line":1,"column":110}},{"source":"vector/bool.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":1,"column":121}},{"source":"vector/bool.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":1,"column":123}},{"source":"vector/bool.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":1,"column":131}},{"source":"vector/bool.ts","name":null,"original":{"line":22,"column":0},"generated":{"line":1,"column":141}},{"source":"vector/bool.ts","name":null,"original":{"line":22,"column":0},"generated":{"line":1,"column":143}},{"source":"vector/bool.ts","name":null,"original":{"line":22,"column":0},"generated":{"line":1,"column":151}},{"source":"vector/bool.ts","name":null,"original":{"line":26,"column":0},"generated":{"line":1,"column":162}},{"source":"vector/bool.ts","name":null,"original":{"line":26,"column":13},"generated":{"line":1,"column":168}},{"source":"vector/bool.ts","name":null,"original":{"line":26,"column":32},"generated":{"line":1,"column":178}},{"source":"vector/bool.ts","name":null,"original":{"line":26,"column":32},"generated":{"line":1,"column":180}},{"source":"vector/bool.ts","name":null,"original":{"line":32,"column":11},"generated":{"line":1,"column":191}},{"source":"vector/bool.ts","name":null,"original":{"line":32,"column":36},"generated":{"line":1,"column":203}},{"source":"vector/bool.ts","name":null,"original":{"line":33,"column":8},"generated":{"line":1,"column":206}},{"source":"vector/bool.ts","name":null,"original":{"line":33,"column":15},"generated":{"line":1,"column":213}},{"source":"vector/bool.ts","name":null,"original":{"line":33,"column":15},"generated":{"line":1,"column":215}},{"source":"vector/bool.ts","name":null,"original":{"line":33,"column":40},"generated":{"line":1,"column":240}},{"source":"vector/bool.ts","name":null,"original":{"line":33,"column":46},"generated":{"line":1,"column":244}},{"source":"vector/bool.ts","name":null,"original":{"line":33,"column":50},"generated":{"line":1,"column":248}},{"source":"vector/bool.ts","name":null,"original":{"line":33,"column":50},"generated":{"line":1,"column":250}},{"source":"vector/bool.ts","name":null,"original":{"line":33,"column":58},"generated":{"line":1,"column":255}},{"source":"vector/bool.ts","name":null,"original":{"line":26,"column":0},"generated":{"line":1,"column":259}},{"source":"vector/bool.ts","name":null,"original":{"line":26,"column":0},"generated":{"line":1,"column":267}},{"source":"vector/bool.ts","name":null,"original":{"line":26,"column":0},"generated":{"line":1,"column":278}}],"sources":{"vector/bool.ts":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Bool } from '../type';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\n\n/** @ignore */\nexport class BoolVector extends BaseVector<Bool> {\n    public static from<TNull = any>(input: Iterable<boolean | TNull>): BoolVector;\n    public static from<TNull = any>(input: AsyncIterable<boolean | TNull>): Promise<BoolVector>;\n    public static from<TNull = any>(input: VectorBuilderOptions<Bool, boolean | TNull>): Chunked<Bool>;\n    public static from<TNull = any>(input: VectorBuilderOptionsAsync<Bool, boolean | TNull>): Promise<Chunked<Bool>>;\n    /** @nocollapse */\n    public static from<TNull = any>(input: Iterable<boolean | TNull> | AsyncIterable<boolean | TNull> | VectorBuilderOptions<Bool, boolean | TNull> | VectorBuilderOptionsAsync<Bool, boolean | TNull>) {\n        return vectorFromValuesWithType(() => new Bool(), input);\n    }\n}\n"},"lineCount":null}},"error":null,"hash":"9721579929d4b8b103b21eff703d3b59","cacheData":{"env":{}}}